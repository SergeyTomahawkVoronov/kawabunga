план тесирования https://spreecommerce-demo.herokuapp.com/ для задания курса QA:
 Так как я не могу задать вопросы разработчику сайта и не знаю как он работает, весь тест относится к "чёрному ящику" 
и "ручное тестирование"
 
  Примерный план теста  по формальности - свободное, цель - функциональное тестирование на позитивный сценарий.
1 загрузка сайта. 
2 читаемость, масштабируемость интерфейса, открытие ссылок категорий.
3 работоспособность регистрации и возможность входа в аккаунт.
4 работоспособность поиска 
5 Возможность добавлять товар в корзину и просматривать её содержимое 
6 Удалять из корзины, менять колличество заказаного товара.
7 проводить оплату товара.
// Добавление:
негативнный сценарий 
Проверить на отказ сайта принимать неправильный почтовый адрес.
Проверить на заполнение логин/пароль незарегистрированым пользователем. (проверено - работает)
проверка совместимости
Открыть на 3 мобильных браузерах, использовать 3 разных браузера для персонального компьютера.
// 


Ответы на вопросы из домашнего задания.

	1. Возможность проверить приложение или фрагменты приложения на ошибки во время процесса создания 
ПО делятся на  уровни:
Примеры приведены из программы, в написании которой участвовал на текущей работе.
	Unit - тест работоспособности малой, узкоспециализированной части кода на работу. Например открытие/закрытие 
COM порта, наполнение массива данными по запросу, запрос - отклик правильность написания и правильное понимание отклика.
Выполняет тот кто пишет код или человек имеющий опыт в программировании.
//Можно ли выполнить UNIT тест вручную?
Ответ: Ручным трудом можно считать подготовку к тесту. Создание эмуляции неподключённых элементов, ручной ввод данных которые не должны или должны пройти.
Но в целом тест проходит автоматически на уровне программы - сборщика (компилятора).
//
	integration - тестирование соединённых в некоторую цепь кусочков на взаимодействие. Например из того что сверху: Открытие порта/запрос на соединение/
запрос на получение данных/правильное заполнение массива данных из отклика/закрытие порта. После успешной сборки появлялись индикаторы на лицевой панели программы,
 сигнализировавшие о успешном прохождении того или иного процесса (автоматизация тестирования).
Выполняет тот кто пишет код или человек имеющий опыт в программировании.
	system - тестирование готового продукта. Оно работает в идеальных условиях. Всё правильно включается и оно работает. На этом этапе я занимался стрессоусойчивостью:
 что будет если 
 Включить программу не подключить прибор, неправильно записаные данные с прибора запихнуть в программу, выбор специфических переменных в неожиданных комбинациях.
 при этом создавались новые окна, которые рассказывали пользователю что пошло не так и исключались возможности зависания...
Выполняют тестировщики широкого профиля без узкой специализации.
	acceptance - конечное испытание, которое показывает что ПО работает и ставится без проблем почти на любую машину. Были проблемы из-за специфических инструментов программирования
labview требует наличия специфических библиотек	National Instruments проблема была решена пересборкой инсталлера.
Выполняют тестировщики широкого профиля без узкой специализации и могут привлекаться простые пользователи (открытый/закрытый бета тест).

Ссылаясь на схему https://raw.githubusercontent.com/polarnik/TypesOfTesting/master/freemind.1.0.1/Testing.Map%20(freemind%201.0.1).jpeg
По виду тестирования можно выполнять на всех уровнях ручное тестирование.

	2. Регрессионное тестирование необходимо для проверки участков кода, которые могли пострадать при обновлении програмного обеспечения.
Особенности: Известные сценарии и последовательности проверок, что даёт возможность автоматизировать процесс. Повторяется при внесениях изменений в готовый продукт.
	
	3.Unit тест - проверка малого, работоспособного участка кода на конкретные задачи. Может выполнятся с применением эмуляции програмной среды (которая изображает подключаемые блоки при сборке).
Преимущества - простота, понятность, возможность автоматизации. Конечный продукт юнитами проверить невозможно, из-за возрастающей сложности конечного (собранного) продукта.
	
	4 При составлении программы тестирования в первую очередь необходимо (на мой взгляд) учитывать требования заказчика и сроки.

	5 Black box - тестирования программы без знания её структуры и без возможности доступа к коду. Модульное тестирование, статический анализ кода, рецензиование кода невозможно.  Регрессионное тестирование - маловероятно.
White box - есть возможность узнать структуру, архитектуру программы и взаимодействовать с разработчиком (программистом).